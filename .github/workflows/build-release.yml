name: Build and Release Excel Template Mapper

on:
  push:
    branches: [ main, master ]  # Build executables on every push to main
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

env:
  APP_NAME: excel-template-mapper
  PYTHON_VERSION: '3.13'

permissions:
  contents: write
  packages: write
  actions: read
  
jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run validation
      run: |
        python test/validate_project.py

    - name: Run tests (if they exist)
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi

  build-python-dist:
    name: Build Python Distribution Packages
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine

    - name: Create distribution setup files
      shell: bash
      run: |
        # Backup original setup.py 
        if [ -f "setup.py" ]; then
          cp setup.py setup_executable.py
        fi

        # Create pyproject.toml
        cat > pyproject.toml << 'EOF'
        [build-system]
        requires = ["setuptools>=45", "wheel"]
        build-backend = "setuptools.build_meta"

        [project]
        name = "excel-template-mapper"
        version = "1.0.0"
        description = "A GUI application for mapping and transforming templates with Excel integration"
        readme = "README.md"
        authors = [
            {name = "Template Mapper Team", email = "support@templatemapper.com"},
        ]
        license = {text = "MIT"}
        classifiers = [
            "Development Status :: 4 - Beta",
            "Intended Audience :: End Users/Desktop", 
            "License :: OSI Approved :: MIT License",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
            "Programming Language :: Python :: 3.13",
            "Topic :: Office/Business :: Financial :: Spreadsheet",
            "Topic :: Utilities",
        ]
        requires-python = ">=3.8"
        dependencies = [
            "et_xmlfile>=2.0.0",
            "GitPython>=3.1.0",
            "openpyxl>=3.1.0", 
            "PySide6>=6.10.0",
            "PySide6_Addons>=6.10.0",
            "PySide6_Essentials>=6.10.0",
            "shiboken6>=6.10.0",
        ]

        [project.optional-dependencies]
        dev = ["pyinstaller", "pytest", "black", "flake8"]

        [project.scripts]
        excel-template-mapper = "app_psg:main"

        [project.urls]
        Homepage = "https://github.com/Nick-prog/Excel-Template-Mapper"
        Repository = "https://github.com/Nick-prog/Excel-Template-Mapper.git"
        Issues = "https://github.com/Nick-prog/Excel-Template-Mapper/issues"

        [tool.setuptools]
        py-modules = ["app_psg", "engine", "models", "utils"]
        include-package-data = true

        [tool.setuptools.packages.find]
        where = ["."]
        include = ["layouts*", "widgets*"]

        [tool.setuptools.package-data]
        "*" = ["*.md", "*.txt", "*.yml", "*.yaml"]
        EOF

        # Create minimal setup.py for distribution builds
        cat > setup.py << 'EOF'
        from setuptools import setup
        setup()
        EOF

        echo "Distribution setup files created successfully"

    - name: Build Python distributions
      run: |
        python -m build

    - name: Restore original setup.py
      shell: bash
      run: |
        if [ -f "setup_executable.py" ]; then
          mv setup_executable.py setup.py
          echo "Original setup.py restored"
        else
          echo "No backup setup.py found to restore"
        fi

    - name: Verify distributions
      run: |
        if [ -d "dist/" ]; then
          echo "📦 Python distribution packages created:"
          ls -la dist/
          python -m twine check dist/*
        else
          echo "❌ dist/ directory not created by setup.py"
          echo "🔍 Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Sign Python packages with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: dist/*.whl dist/*.tar.gz
        upload-signing-artifacts: true
      env:
        SIGSTORE_ID_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Python distribution artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-distributions
        path: dist/
        retention-days: 90

    - name: Upload to tagged release (Python packages)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.os }}
    needs: [test, build-python-dist]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: excel-template-mapper.exe
            asset_name: excel-template-mapper-windows-amd64.exe
          - os: ubuntu-latest
            artifact_name: excel-template-mapper
            asset_name: excel-template-mapper-linux-amd64
          - os: macos-latest
            artifact_name: excel-template-mapper
            asset_name: excel-template-mapper-macos-amd64
          - os: macos-14  # Apple Silicon
            artifact_name: excel-template-mapper
            asset_name: excel-template-mapper-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1 \
          libglib2.0-0 \
          libxext6 \
          libsm6 \
          libxrender1 \
          libfontconfig1 \
          libxi6 \
          libxrandr2 \
          libxss1 \
          libxtst6 \
          libasound2t64 \
          libxkbcommon-x11-0 \
          libxcb-xinerama0 \
          xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with setup.py
      run: |
        python setup.py executable

    - name: Verify executable exists and rename
      shell: bash
      run: |
        if [ -d "dist/" ]; then
          echo "📂 Contents of dist directory:"
          ls -la dist/
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            if [ -f "dist/Template-Mapper.exe" ]; then
              mv dist/Template-Mapper.exe dist/${{ matrix.artifact_name }}
              echo "✅ Windows executable renamed successfully"
            else
              echo "❌ Template-Mapper.exe not found in dist/"
              exit 1
            fi
          else
            if [ -f "dist/Template-Mapper" ]; then
              mv dist/Template-Mapper dist/${{ matrix.artifact_name }}
              chmod +x dist/${{ matrix.artifact_name }}
              echo "✅ Unix executable renamed and made executable"
            else
              echo "❌ Template-Mapper not found in dist/"
              exit 1
            fi
          fi
        else
          echo "❌ dist/ directory not created by setup.py executable"
          echo "🔍 Current directory contents:"
          ls -la
          exit 1
        fi

    - name: Test executable (quick validation)
      shell: bash
      run: |
        if [ "${{ matrix.os }}" != "ubuntu-latest" ]; then
          # Skip GUI test on headless Ubuntu, just check if executable runs
          echo "Skipping GUI test on headless environment"
        fi

    - name: Sign artifact with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: dist/${{ matrix.artifact_name }}
        upload-signing-artifacts: true
      env:
        SIGSTORE_ID_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          dist/${{ matrix.artifact_name }}
          dist/${{ matrix.artifact_name }}.sigstore
        retention-days: 90

    - name: Upload to tagged release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/${{ matrix.artifact_name }}
          dist/${{ matrix.artifact_name }}.sigstore
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create development release with all platform builds
  create-dev-release:
    name: Create Latest Development Release
    needs: [build, build-python-dist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all executable artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Download Python distribution artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-distributions
        path: python-dist/
        
    - name: Prepare release files
      run: |
        mkdir -p release-files/
        echo "=== Executable artifacts ==="
        find artifacts/ -type f -name "*" | head -20
        # Copy executable artifacts
        find artifacts/ -type f -exec cp {} release-files/ \;
        echo "=== Python distribution packages ==="
        ls -la python-dist/
        # Copy Python distribution packages
        find python-dist/ -type f -exec cp {} release-files/ \;
        echo "=== Final release files ==="
        ls -la release-files/

    - name: Install GitHub CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y gh
        
    - name: Delete existing latest release and tag
      continue-on-error: true
      run: |
        # Delete the release first
        gh release delete latest --yes || echo "No existing latest release found"
        # Delete the tag if it exists
        git push --delete origin latest || echo "No existing latest tag found"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate checksums
      run: |
        cd release-files
        # Generate SHA256 checksums for all files including signatures
        find . -type f \( -name "*.exe" -o -name "excel-template-mapper-*" -o -name "*.whl" -o -name "*.tar.gz" -o -name "*.sigstore" \) -exec sha256sum {} \; > ../SHA256SUMS.txt
        cd ..
        
    - name: Create latest tag
      run: |
        git tag -f latest
        git push --force origin latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create latest development release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: latest
        name: "Latest Development Build"
        body: |
          **Latest Development Build**
          
          This is an automated build from the latest commit on the main branch.
          
          **Commit**: ${{ github.sha }}
          **Date**: ${{ github.event.head_commit.timestamp }}
          **Author**: ${{ github.event.head_commit.author.name }}
          
          **Download Options:**
          
          **Standalone Executables** (No Python required):
          - **Windows**: `excel-template-mapper-windows-amd64.exe` 
          - **macOS (Intel)**: `excel-template-mapper-macos-amd64`
          - **macOS (Apple Silicon)**: `excel-template-mapper-macos-arm64`
          - **Linux**: `excel-template-mapper-linux-amd64`
          
          **Python Packages** (For developers/pip install):
          - **Source Distribution**: `excel-template-mapper-*.tar.gz`
          - **Wheel Package**: `excel-template-mapper-*-py3-none-any.whl`
          
          **Installation from Python packages:**
          ```bash
          # Download the .whl file, then:
          pip install excel-template-mapper-*.whl
          
          # Or from source:
          pip install excel-template-mapper-*.tar.gz
          ```
          
          > **Development Build Notice**: This is a pre-release development build that gets updated automatically with each commit. For stable, tested releases, please check the [main releases page](https://github.com/${{ github.repository }}/releases).
          
          **Security & Verification:**
          - All files include **Sigstore cryptographic signatures** (`.sigstore` files)
          - Download `SHA256SUMS.txt` to verify file integrity
          - See [DOWNLOAD_SECURITY.md](https://github.com/${{ github.repository }}/blob/main/DOWNLOAD_SECURITY.md) for verification instructions
          
          **Recent Changes:**
          ${{ github.event.head_commit.message }}
        files: |
          release-files/*
          SHA256SUMS.txt
        draft: false
        prerelease: true
        make_latest: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v4
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/excel-template-mapper
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push main image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push GUI image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/Dockerfile.gui
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/excel-template-mapper:gui
          ghcr.io/${{ github.repository_owner }}/excel-template-mapper:gui-latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-installer:
    name: Create Installation Scripts
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create installation script
      run: |
        cat > install.sh << 'EOF'
        #!/bin/bash
        # Excel Template Mapper Installer Script
        # Auto-detects platform and downloads appropriate executable

        set -e

        APP_NAME="excel-template-mapper"
        GITHUB_REPO="${{ github.repository }}"
        VERSION="${{ github.ref_name }}"

        echo "Excel Template Mapper Installer"
        echo "Version: $VERSION"
        echo "Repository: $GITHUB_REPO"
        echo ""

        # Detect platform
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)

        case "$OS" in
            linux*)
                PLATFORM="linux-amd64"
                EXECUTABLE_NAME="$APP_NAME"
                ;;
            darwin*)
                if [ "$ARCH" = "arm64" ]; then
                    PLATFORM="macos-arm64"
                else
                    PLATFORM="macos-amd64"
                fi
                EXECUTABLE_NAME="$APP_NAME"
                ;;
            mingw*|msys*|cygwin*)
                PLATFORM="windows-amd64"
                EXECUTABLE_NAME="$APP_NAME.exe"
                ;;
            *)
                echo "ERROR: Unsupported operating system: $OS"
                exit 1
                ;;
        esac

        echo "Detected platform: $PLATFORM"
        
        # Download URL
        DOWNLOAD_URL="https://github.com/$GITHUB_REPO/releases/download/$VERSION/$APP_NAME-$PLATFORM"
        if [ "$PLATFORM" = "windows-amd64" ]; then
            DOWNLOAD_URL="$DOWNLOAD_URL.exe"
        fi

        echo "Downloading from: $DOWNLOAD_URL"

        # Download executable
        if command -v curl &> /dev/null; then
            curl -L -o "$EXECUTABLE_NAME" "$DOWNLOAD_URL"
        elif command -v wget &> /dev/null; then
            wget -O "$EXECUTABLE_NAME" "$DOWNLOAD_URL"
        else
            echo "ERROR: Neither curl nor wget found. Please install one of them."
            exit 1
        fi

        # Make executable (Unix-like systems)
        if [ "$OS" != "mingw"* ] && [ "$OS" != "msys"* ] && [ "$OS" != "cygwin"* ]; then
            chmod +x "$EXECUTABLE_NAME"
        fi

        echo "Download completed: $EXECUTABLE_NAME"
        echo ""
        echo "To run the application:"
        echo "   ./$EXECUTABLE_NAME"
        echo ""
        echo "TIP: You can move the executable to a directory in your PATH for global access."
        EOF

        chmod +x install.sh

    - name: Upload installer scripts
      uses: softprops/action-gh-release@v2
      with:
        files: install.sh
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}