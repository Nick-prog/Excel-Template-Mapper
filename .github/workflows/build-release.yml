name: Build and Release Excel Template Mapper

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

env:
  APP_NAME: excel-template-mapper
  PYTHON_VERSION: '3.13'
  
jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run validation
      run: |
        python test/validate_project.py

    - name: Run tests (if they exist)
      run: |
        if [ -d "tests" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests directory found, skipping tests"
        fi

  build:
    name: Build ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: excel-template-mapper.exe
            asset_name: excel-template-mapper-windows-amd64.exe
          - os: ubuntu-latest
            artifact_name: excel-template-mapper
            asset_name: excel-template-mapper-linux-amd64
          - os: macos-latest
            artifact_name: excel-template-mapper
            asset_name: excel-template-mapper-macos-amd64
          - os: macos-14  # Apple Silicon
            artifact_name: excel-template-mapper
            asset_name: excel-template-mapper-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libxext6 \
          libsm6 \
          libxrender1 \
          libfontconfig1 \
          libxi6 \
          libxrandr2 \
          libxss1 \
          libxtst6 \
          libasound2 \
          libxkbcommon-x11-0 \
          libxcb-xinerama0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with setup.py
      run: |
        python setup.py executable

    - name: Verify executable exists and rename
      shell: bash
      run: |
        ls -la dist/
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mv dist/Template-Mapper.exe dist/${{ matrix.artifact_name }}
        else
          mv dist/Template-Mapper dist/${{ matrix.artifact_name }}
          chmod +x dist/${{ matrix.artifact_name }}
        fi

    - name: Test executable (quick validation)
      shell: bash
      run: |
        if [ "${{ matrix.os }}" != "ubuntu-latest" ]; then
          # Skip GUI test on headless Ubuntu, just check if executable runs
          echo "Skipping GUI test on headless environment"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.artifact_name }}
        retention-days: 90

    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: dist/${{ matrix.artifact_name }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/excel-template-mapper
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push main image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push GUI image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.gui
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/excel-template-mapper:gui
          ghcr.io/${{ github.repository_owner }}/excel-template-mapper:gui-latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-installer:
    name: Create Installation Scripts
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create installation script
      run: |
        cat > install.sh << 'EOF'
        #!/bin/bash
        # Excel Template Mapper Installer Script
        # Auto-detects platform and downloads appropriate executable

        set -e

        APP_NAME="excel-template-mapper"
        GITHUB_REPO="${{ github.repository }}"
        VERSION="${{ github.ref_name }}"

        echo "üöÄ Excel Template Mapper Installer"
        echo "üì¶ Version: $VERSION"
        echo "üìÇ Repository: $GITHUB_REPO"
        echo ""

        # Detect platform
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)

        case "$OS" in
            linux*)
                PLATFORM="linux-amd64"
                EXECUTABLE_NAME="$APP_NAME"
                ;;
            darwin*)
                if [ "$ARCH" = "arm64" ]; then
                    PLATFORM="macos-arm64"
                else
                    PLATFORM="macos-amd64"
                fi
                EXECUTABLE_NAME="$APP_NAME"
                ;;
            mingw*|msys*|cygwin*)
                PLATFORM="windows-amd64"
                EXECUTABLE_NAME="$APP_NAME.exe"
                ;;
            *)
                echo "‚ùå Unsupported operating system: $OS"
                exit 1
                ;;
        esac

        echo "üîç Detected platform: $PLATFORM"
        
        # Download URL
        DOWNLOAD_URL="https://github.com/$GITHUB_REPO/releases/download/$VERSION/$APP_NAME-$PLATFORM"
        if [ "$PLATFORM" = "windows-amd64" ]; then
            DOWNLOAD_URL="$DOWNLOAD_URL.exe"
        fi

        echo "üì• Downloading from: $DOWNLOAD_URL"

        # Download executable
        if command -v curl &> /dev/null; then
            curl -L -o "$EXECUTABLE_NAME" "$DOWNLOAD_URL"
        elif command -v wget &> /dev/null; then
            wget -O "$EXECUTABLE_NAME" "$DOWNLOAD_URL"
        else
            echo "‚ùå Neither curl nor wget found. Please install one of them."
            exit 1
        fi

        # Make executable (Unix-like systems)
        if [ "$OS" != "mingw"* ] && [ "$OS" != "msys"* ] && [ "$OS" != "cygwin"* ]; then
            chmod +x "$EXECUTABLE_NAME"
        fi

        echo "‚úÖ Download completed: $EXECUTABLE_NAME"
        echo ""
        echo "üéØ To run the application:"
        echo "   ./$EXECUTABLE_NAME"
        echo ""
        echo "üí° You can move the executable to a directory in your PATH for global access."
        EOF

        chmod +x install.sh

    - name: Upload installer scripts
      uses: softprops/action-gh-release@v2
      with:
        files: install.sh
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}